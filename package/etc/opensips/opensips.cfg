#
# $Id: opensips.cfg 8758 2012-02-29 11:59:26Z vladut-paiu $
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=6
log_stderror=no
log_facility=LOG_LOCAL0

fork=yes
children=4
user_agent_header="User-Agent:roger"
server_header="Server:roger"
/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=yes


listen=udp:0.0.0.0:5060  # CUSTOMIZE ME


disable_tcp=yes

disable_tls=yes

####### Modules Section ########

#set module path
mpath="/home/ubuntu/voip/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timer", 10)
modparam("tm", "fr_inv_timer", 50)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)






#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "cseq_delay", 5)
modparam("usrloc", "db_mode",   0)
modparam("usrloc", "timer_interval", 360000)
#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", 7)
/* uncomment the next line not to allow more than 10 contacts per AOR */
modparam("registrar", "max_contacts", 1)
modparam("registrar", "min_expires", 36)

#### ACCounting module
loadmodule "acc.so"
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure the enable "append_fromtag"
   in "rr" module */
modparam("acc", "detect_direction", 0)
modparam("acc", "failed_transaction_flag", 3)
/* account triggers (flags) */
modparam("acc", "log_flag", 1)
modparam("acc", "log_missed_flag", 2)


#### AVP
loadmodule "db_mysql.so"
loadmodule "avpops.so"
modparam("avpops","db_url","mysql://opensips:opensipsrw@180.153.42.152/opensips")




loadmodule "textops.so"
loadmodule "dialog.so"
loadmodule "rtpproxy.so"
modparam("rtpproxy", "rtpproxy_sock", "udp:180.153.42.152:8899")



loadmodule "msilo.so"
modparam("msilo","db_url","mysql://opensips:opensipsrw@localhost/opensips")
modparam("msilo", "db_table", "imsg")
modparam("msilo","from_address","sip:registrar@roger")
modparam("msilo", "add_date", 0)




loadmodule "httpd.so"
modparam("httpd", "ip", "172.18.0.17")
modparam("httpd", "port", 18080)
modparam("httpd", "buf_size", 524288)



loadmodule "mi_http.so"
modparam("mi_http", "mi_http_root", "qy")


loadmodule "nathelper.so"
#modparam("nathelper", "natping_interval", 30)
#modparam("nathelper", "natping_processes", 3)
#modparam("nathelper", "sipping_bflag", 255)
#modparam("nathelper", "sipping_from", "sip:hi@roger")

####### Routing Logic ########

# main request routing logic

route{
	if ( $ci == "bump-message" ) {
		xlog("$fu");
		$var(aor) = "sip:" + $fU + "@" + $fd;
		if( registered("location","$var(aor)") ){
                	save("location","br");
		}
		m_dump();
		t_on_reply("global");
		#t_relay();
                exit;
        }

        if (!mf_process_maxfwd_header("10")) {
                sl_send_reply("483","Too Many Hops");
                exit;
        }
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			t_relay();
		} 
		exit;
	}
	if( is_method("BYE")) {
		xlog("<<<<   BYE");
		if (!lookup("location","m")) {
	                t_reply("404", "Not Found");
	                exit;
	        }
		if (!t_relay()) {
			sl_reply_error();
			exit;
		}
		unforce_rtp_proxy();
		exit;
	}
	if ( is_method("MESSAGE") ) {   
		if (!lookup("location","m")) {
			if (m_store("$ru")) {
				log("IMSG: offline message stored\n");
				if (!t_reply("202", "Accepted")) {
					sl_reply_error();
				};
			}else{
				log("IMSG: offline message NOT stored\n");
				if (!t_reply("503", "Service Unavailable")) {
					sl_reply_error();
				};
			};
			exit;
                }
		t_relay();
		exit;
	}
        if (has_totag()) {
		xlog("<<<<< to tag");
                # sequential request withing a dialog should
                # take the path determined by record-routing
                if (loose_route()) {
			xlog("<<<<< loose route");
                        if (is_method("BYE")) {
				xlog("<<<<< bye [$ru]\n");
                                setflag(1); # do accounting ...
                                setflag(3); # ... even if the transaction fails
                        } else if (is_method("INVITE")) {
                                # even if in most of the cases is useless, do RR for
                                # re-INVITEs alos, as some buggy clients do change route set
                                # during the dialog.
				xlog("<<<<< loose route [$fU\$auth.nonce\$an][$fu/$tu/$ru/$ci]\n");
				record_route();
			}

			

			# route it out to whatever destination was set by loose_route()
			# in $du (destination URI).
			route(1);
		} else {
			xlog("<<<<< not loose route");
			if ( is_method("ACK") ) {
				if ( t_check_trans() ) {
					# non loose-route, but stateful ACK; must be an ACK after 
					# a 487 or e.g. 404 from upstream server
					t_relay();
					exit;
				} else {
					# ACK without matching transaction ->
					# ignore and discard
					exit;
				}
			}
			sl_send_reply("404","Not here");
		}
		exit;
	}else {
                if( is_method("INVITE")) {
                        xlog("<<<<< exit route [$fU\$auth.nonce\$an][$ct.fields(uri)\$ct.fields(received)\$ct]\n");
                        record_route_preset("$fU@180.153.42.152");
			xlog("<<< $rr, $(ct.fields(uri){uri.host}), -$(ct.fields(uri){uri.port}) reply\n");
			rtpproxy_offer("o");
			#fix_nated_sdp("1");
			#subst_body('/^a=rtcp:[0-9]* IN IP4 [^ ]*/a=rtcp:$(ct.fields(uri){uri.port}) IN IP4 $(ct.fields(uri){uri.host})/');
			#subst_body('/^c=IN IP4 [^ ]*/c=IN IP4 $(ct.fields(uri){uri.host})/');
			#subst_body('/^m=audio [0-9]* /m=audio $(ct.fields(uri){uri.port}) /');
                }
        }
	# CANCEL processing
	if (is_method("CANCEL"))
	{
		if (t_check_trans()){
			t_relay();
                }
		unforce_rtp_proxy();
		exit;
	}

	t_check_trans();

	if ( !(is_method("REGISTER")  ) ) {
		
		if (from_uri==myself)
		
		{
			
		} else {
			# if caller is not local, then called number must be local
			
			if (!uri==myself) {
				send_reply("403","Rely forbidden");
				exit;
			}
		}

	}

	# preloaded route checking
	if (loose_route()) {
		xlog("L_ERR",
		"Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
		if (!is_method("ACK"))
			sl_send_reply("403","Preload Route denied");
		exit;
	}

	# record routing
	if (!is_method("REGISTER|MESSAGE"))
		record_route();

	# account only INVITEs
	if (is_method("INVITE")) {
		
		setflag(1); # do accounting
	}

	
	if (!uri==myself) {
		append_hf("P-hint: outbound\r\n"); 
		
		route(1);
	}

	# requests for my domain
	
	if (is_method("PUBLISH|SUBSCRIBE"))
	{
		sl_send_reply("503", "Service Unavailable");
		exit;
	}

	if ( is_method("REGISTER") && $ci != "bump-message" )
	{
		if( is_present_hf("Expires") && $(hdr(Expires){s.int})==0 ) {
			if (!t_reply("200", "Unregister OK")) {
                        	sl_reply_error();
                        };
			exit;
		}
		#if( registered("location","$fu") ) {
		#	sl_send_reply("603","Register error");
		#	xlog(">>>>>>>>>>>> login conflict\n");
		#}else {
			avp_db_query("select true from subscriber where username='$fU' and password='$an'","$avp(678)");
			xlog(">>>>>>>>>>>> verify [$fU\$auth.nonce\$an]\n");
			if( $avp(678) == 1 ) {
				xlog(">>>>>>>>>>>> user existed login\n");
				if (   0 ) setflag(7);
				if (nat_uac_test("3")) {
                                        fix_nated_contact();
                                };
				force_rport();
		                if (!save("location","i")) {
					sl_reply_error();
				};
				if ( uri==myself ) {
					m_dump();
				}
				exit;
			}else {
				$avp(678) = 0;
				avp_db_query("select true from subscriber where username='$fU'","$avp(678)");
				xlog(">>>>>>>>>>>> user not existed login, find user [$avp(678)]\n");
				if( $avp(678) == 1 ) {
					#sl_send_reply("401","Register Unauthorized");
					# temp fix: user will drop in 1 hour, REGISTER without pwd, and route will enter this branch
					# e.g. >>>>>>>>>>>> verify [13817086743\<null>\<null>]
					if (nat_uac_test("3")) {
						fix_nated_contact();
					};
					force_rport();
					if (!save("location","i")) {
						sl_reply_error();
					};
					m_dump();
					exit;
				}else if( $an != ""  ) {
					avp_db_query("insert into subscriber(username,password)values('$fU','$an')");
					$avp(678) = 0;
					avp_db_query("select true from subscriber where username='$fU' and password='$an'","$avp(678)");
					if ( $avp(678) == 1 ) {
						if (   0 ) setflag(7);
	                        		if (!save("location"))
	                        		sl_reply_error();
	                        		exit;
					}
				}
			}
		#}
	}

	if ($rU==NULL) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	

	

	 

	# do lookup with method filtering
	if (!lookup("location","m")) {
		
		
		t_newtran();
		t_reply("404", "Not Found");
		exit;
	} 

	

	# when routing via usrloc, log the missed calls also
	setflag(2);
	route(1);
}


route[1] {
	# for INVITEs enable some additional helper routes
	if (is_method("INVITE")) {
		
		

		t_on_branch("2");
		t_on_reply("2");
		t_on_failure("1");
	}

	

	if (!t_relay()) {
		send_reply("500","Internal Error");
	};
	exit;
}




branch_route[2] {
	xlog("new branch at $ru\n");
}

onreply_route[global] {
        if( $ci == "bump-message" ) {
                drop;
        }
}

onreply_route[2] {
	if (t_check_status("200") ) {
		xlog("<<< 200 $rr, $(ct.fields(uri){uri.host}), $(ct.fields(uri){uri.port}) reply\n");
		rtpproxy_answer("o");
		#fix_nated_sdp("1");
		#subst_body('/^a=rtcp:[0-9]* IN IP4 [^ ]*/a=rtcp:$(ct.fields(uri){uri.port}) IN IP4 $(ct.fields(uri){uri.host})/');
		#subst_body('/^c=IN IP4 [^ ]*/c=IN IP4 $(ct.fields(uri){uri.host})/');
		#subst_body('/^m=audio [0-9]* /m=audio $(ct.fields(uri){uri.port}) /');
	}	
	xlog("incoming reply\n");
}

failure_route[1] {
	if (t_was_cancelled()) {
		exit;
	}

	# uncomment the following lines if you want to block client 
	# redirect based on 3xx replies.
	##if (t_check_status("3[0-9][0-9]")) {
	##t_reply("404","Not found");
	##	exit;
	##}

	
}



