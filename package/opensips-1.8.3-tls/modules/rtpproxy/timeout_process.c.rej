--- modules/rtpproxy/timeout_process.c	(revision 9709)
+++ modules/rtpproxy/timeout_process.c	(working copy)
@@ -317,46 +317,51 @@
 				continue;
 			}
 			LM_DBG("Timeout detected on call [%.*s]\n", len, buffer);
-			dlg_id.s = buffer;
-			dlg_id.len = len; /*strlen(buffer);*/
-			trim(&dlg_id);
+			p = buffer;
+			end = buffer + len;
 
 			do {
+				dlg_id.s = p;
+				dlg_id.len = end - p;
+
 				/* the message is: h_entry.h_id */
-				p = memchr(dlg_id.s, '.', dlg_id.len);
-				if(p == NULL) {
-					LM_ERR("Wrong formated message received from rtpproxy [%.*s]\n",
-							dlg_id.len, dlg_id.s);
-					break;
+				for (; (p < end) && IS_DIGIT(*p); ++p);
+				if (p == end || *p != '.') {
+					LM_ERR("Wrong formated message received from rtpproxy at char"
+							" '%c' - [%.*s] - %d\n", *p, len, buffer, len);
+					goto skip;
 				}
 				id.s = dlg_id.s;
 				id.len = p-dlg_id.s;
-				if(str2int(&id, &h_entry)< 0) {
+				if(!id.len || str2int(&id, &h_entry)< 0) {
 					LM_ERR("Wrong formated message received from rtpproxy - invalid"
-							" dialog entry [%.*s]\n", id.len, id.s);
-					break;
+							" dialog entry [%.*s] - buffer [%.*s] - %d\n",
+							id.len, id.s, len, buffer, len);
+					goto skip;
 				}
+				/* skip '.' */
 				id.s = ++p;
 				/* go to end or to next non-digit */
-				for (; (p < buffer + len ) && IS_DIGIT(*p); ++p);
-				
+				for (; (p < end) && IS_DIGIT(*p); ++p);
+
 				id.len = p - id.s;
-				if(str2int(&id, &h_id)< 0) {
+				if(!id.len || str2int(&id, &h_id)< 0) {
 					LM_ERR("Wrong formated message received from rtpproxy - invalid"
-							" dialog id [%.*s]\n", id.len, id.s);
-					break;
+							" dialog id [%.*s] - [%.*s] - %d\n",
+							id.len, id.s, len, buffer, len);
+					goto skip;
 				}
 				LM_DBG("hentry = %u, h_id = %u\n", h_entry, h_id);
+				LM_DBG("Timeout detected on dialog hentry = %u, h_id = %u\n", 
+						h_entry, h_id);
 
 				if(dlg_api.terminate_dlg(h_entry, h_id)< 0)
 					LM_ERR("Failed to terminate dialog h_entry=[%u], h_id=[%u]\n", h_entry, h_id);
+skip:
+				/* skip everything that is non digit */
+				for (; (p < end) && !IS_DIGIT(*p); ++p);
 
-				/* go to end or to next digit */
-				for (; (p < buffer + len) && !IS_DIGIT(*p); ++p);
-				dlg_id.s = p;
-				dlg_id.len = buffer + len - p;
-				LM_DBG("left %d to parse\n", dlg_id.len);
-			} while (dlg_id.len > 0);
+			} while (p < end);
 		}
 	}
 }
